image: docker:latest
services:
  - docker:dind
variables:
  DOCKER_DRIVER: overlay

stages:
  - build
  - deploy

variables:
  CONTAINER_BACKEND_PROD_IMAGE: smartcommunitylab/pgaziendale-backend:prod-$CI_COMMIT_SHORT_SHA
  CONTAINER_BACKEND_PROD_IMAGE_LATEST: smartcommunitylab/pgaziendale-backend:latest
  CONTAINER_BACKEND_DEV_IMAGE: smartcommunitylab/pgaziendale-backend:dev-$CI_COMMIT_SHORT_SHA
  CONTAINER_BACKEND_DEV_IMAGE_LATEST: smartcommunitylab/pgaziendale-backend:dev-latest

build_backend_prod:
  stage: build
  script:
    - cd backend
    - docker login -u $DHUB_USER -p $DHUB_PASS
    - DOCKER_BUILDKIT=1 docker build -f Dockerfile -t $CONTAINER_BACKEND_PROD_IMAGE -t $CONTAINER_BACKEND_PROD_IMAGE_LATEST .
    - docker push $CONTAINER_BACKEND_PROD_IMAGE
    - docker push $CONTAINER_BACKEND_PROD_IMAGE_LATEST
  only:
    - prod

build_backend_dev:
  stage: build
  script:
    - cd backend
    - docker login -u $DHUB_USER -p $DHUB_PASS
    - DOCKER_BUILDKIT=1 docker build -f Dockerfile -t $CONTAINER_BACKEND_DEV_IMAGE -t $CONTAINER_BACKEND_DEV_IMAGE_LATEST .
    - docker push $CONTAINER_BACKEND_DEV_IMAGE
    - docker push $CONTAINER_BACKEND_DEV_IMAGE_LATEST
  only:
    - dev

deploy_backend_prod:
  stage: deploy
  image: smartcommunitylab/kubectl-alpine:latest
  environment:
    name: develop
  script:
    - echo "deploy"
    - kubectl -n pgaziendale set image deployments/pgaziendale-backend-prod pgaziendale-backend-prod=$CONTAINER_BACKEND_PROD_IMAGE --record=true
    - kubectl -n pgaziendale rollout status deployment pgaziendale-backend-prod
  only:
    - prod

deploy_backend_dev:
  stage: deploy
  environment:
    name: develop
  script:
    - echo "deploy"
    - kubectl -n pgaziendale set image deployments/pgaziendale-backend-dev pgaziendale-backend-dev=$CONTAINER_BACKEND_DEV_IMAGE --record=true
    - kubectl -n pgaziendale rollout status deployment pgaziendale-backend-dev
  only:
    - dev

### FRONTEND ###
# build_prod:
#   stage: build
#   script:
#     - sed -i -e 's/configService.DEVELOPMENT = true/configService.DEVELOPMENT = false/g' ./sco.climb.domain/src/main/resources/static/game-dashboard/js/services/confSrv.js
#     - docker login -u $DHUB_USER -p $DHUB_PASS
#     - DOCKER_BUILDKIT=1 docker build -f Dockerfile -t $CONTAINER_PROD_IMAGE -t $CONTAINER_IMAGE .
#     - docker push $CONTAINER_PROD_IMAGE
#   only:
#     - prod
#
# build_dev:
#   stage: build
#   script:
#     - docker login -u $DHUB_USER -p $DHUB_PASS
#     - DOCKER_BUILDKIT=1 docker build -f Dockerfile -t $CONTAINER_PROD_IMAGE -t $CONTAINER_IMAGE .
#     - docker push $CONTAINER_IMAGE
#   only:
#     - dev
#
# deploy_prod:
#   stage: deploy
#   image: smartcommunitylab/kubectl-alpine:latest
#   environment:
#     name: develop
#   script:
#     - echo "deploy"
#     - kubectl -n climb set image deployments/climb climb-domain=$CONTAINER_PROD_IMAGE --record=true
#     - kubectl -n climb rollout status deployment climb
#   only:
#     - prod
#
# deploy_dev:
#   stage: deploy
#   environment:
#     name: develop
#   script:
#     - ssh -i $DEV_KEY $DEV_USER@$DEV_IP 'bash ~/sco.climb.context.v3/climb.sh'
#   only:
#     - dev
